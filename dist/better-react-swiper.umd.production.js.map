{"version":3,"file":"better-react-swiper.umd.production.js","sources":["../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nconst isMobile = (media: 'xs' | 'sm' | 'md') => {\n  return media === 'xs' || media === 'sm';\n};\n\nconst color = {\n  blue: '#105783',\n};\n\nexport const SwiperCanvas = styled.div`\n  box-sizing: content-box;\n  display: flex;\n  flex-wrap: nowrap;\n  width: calc(100% - 120px);\n  margin: 0;\n  padding: 0 60px;\n  mask-image: -webkit-gradient(\n    linear,\n    left top,\n    right top,\n    color-stop(0, rgba(0, 0, 0, 0)),\n    color-stop(0.05, rgba(0, 0, 0, 1)),\n    color-stop(0.95, rgba(0, 0, 0, 1)),\n    color-stop(1, rgba(0, 0, 0, 0))\n  );\n  overflow: hidden;\n`;\n\nconst arrowStyles = css`\n  box-sizing: content-box;\n  cursor: pointer;\n  background: #fff;\n  border: 0;\n  color: ${color.blue};\n  border-radius: 4px;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);\n  font-size: 12px;\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  top: 50%;\n  margin-top: -15px;\n  z-index: 1;\n  transition: 0.3s opacity;\n`;\n\nexport const ArrowLeft = styled.button<{ faded: boolean }>`\n  ${arrowStyles};\n  opacity: ${props => (props.faded ? 0.25 : 1)};\n  left: 10px;\n`;\n\nexport const ArrowRight = styled.button<{ faded: boolean }>`\n  ${arrowStyles};\n  opacity: ${props => (props.faded ? 0.25 : 1)};\n  right: 10px;\n`;\n\nexport const Item = styled.div<{\n  currentIndex: number;\n  itemsWide: number;\n}>`\n  transition: 0.3s left;\n  position: relative;\n  width: ${props => 100 / props.itemsWide}%;\n  flex: 0 0 ${props => 100 / props.itemsWide}%;\n  display: flex;\n`;\n\nexport const SwiperWrapper = styled.div<{ media: 'xs' | 'sm' | 'md' }>`\n  position: relative;\n\n  ${SwiperCanvas} {\n    ${props =>\n      isMobile(props.media)\n        ? css`\n            width: calc(100% - 80px);\n            padding: 0 40px;\n          `\n        : null}\n  }\n\n  ${ArrowLeft} {\n    ${props =>\n      isMobile(props.media)\n        ? css`\n            left: 5px;\n          `\n        : null}\n  }\n\n  ${ArrowRight} {\n    ${props =>\n      isMobile(props.media)\n        ? css`\n            right: 5px;\n          `\n        : null}\n  }\n\n  ${Item} {\n    ${props =>\n      isMobile(props.media)\n        ? css`\n            width: 100%;\n            flex-basis: 100%;\n          `\n        : null}\n  }\n`;\n","import React, { useState } from 'react';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { EventData, Swipeable, SwipeableOptions } from 'react-swipeable';\n\nimport {\n  ArrowLeft,\n  ArrowRight,\n  Item,\n  SwiperCanvas,\n  SwiperWrapper,\n} from './styles';\n\nconst MEDIA_MAX_XS = 576;\nconst MEDIA_MAX_SM = 767;\n\ninterface SwiperProps {\n  items: any[];\n  itemsWide?: number;\n  infinity?: boolean;\n  canvasClassName?: string;\n  canvasStyle?: React.CSSProperties;\n  arrowClassName?: string;\n  arrowStyle?: React.CSSProperties;\n  style?: React.CSSProperties;\n}\n\nexport const Swiper = ({\n  items = [],\n  itemsWide = 3,\n  infinity = false,\n  canvasClassName,\n  canvasStyle,\n  arrowClassName,\n  arrowStyle,\n  style,\n}: SwiperProps): JSX.Element => {\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [slideOffset, setSlideOffset] = useState<number>(0);\n\n  // TODO: there has to be a better way...\n  const [lastSwipe, setLastSwipe] = useState<number | null>(null);\n  const [width, setWidth] = useState<number>(0);\n\n  const computeMedia = () => {\n    if (width <= MEDIA_MAX_XS) {\n      return 'xs';\n    }\n    if (width <= MEDIA_MAX_SM) {\n      return 'sm';\n    }\n    return 'md';\n  };\n\n  const computeItemWidth = () => {\n    return width <= MEDIA_MAX_SM ? 1 : itemsWide;\n  };\n\n  const canGoToPrevious = () => {\n    return (infinity && items.length > 1) || currentIndex !== 0;\n  };\n\n  const canGoToNext = () => {\n    const computedWide = computeItemWidth();\n\n    return (\n      (infinity && items.length > 1) ||\n      currentIndex < items.length - computedWide\n    );\n  };\n\n  const goToPrevious = () => {\n    if (!canGoToPrevious()) {\n      return;\n    }\n\n    const computedWide = computeItemWidth();\n\n    const steps = currentIndex === 0 ? computedWide : 1;\n    const prev = (items.length + currentIndex - steps) % items.length;\n\n    setCurrentIndex(prev);\n  };\n\n  const goToNext = () => {\n    if (!canGoToNext()) {\n      return;\n    }\n\n    const computedWide = computeItemWidth();\n\n    const steps = items.length - currentIndex > computedWide ? 1 : computedWide;\n    const next = (items.length + currentIndex + steps) % items.length;\n\n    setCurrentIndex(next);\n  };\n\n  const resetSwipe = () => {\n    const now = new Date().getTime();\n    setSlideOffset(0);\n    setLastSwipe(now);\n  };\n\n  const onSwiping = (e: EventData) => {\n    const now = new Date().getTime();\n\n    if (!width) {\n      return;\n    }\n\n    if (lastSwipe && now - lastSwipe < 250) {\n      return;\n    }\n\n    const draggedPercent = (e.deltaX * 2) / width;\n\n    setSlideOffset(draggedPercent * 100);\n\n    if (draggedPercent < -0.3333) {\n      resetSwipe();\n      goToPrevious();\n      return;\n    }\n\n    if (draggedPercent > 0.3333) {\n      resetSwipe();\n      goToNext();\n      return;\n    }\n  };\n\n  const onSwipeEnd = () => {\n    setSlideOffset(0);\n  };\n\n  const onResize = (w: number) => {\n    setWidth(w);\n    resetSwipe();\n  };\n\n  const swipeConfig: SwipeableOptions = {\n    trackTouch: true,\n    trackMouse: true,\n  };\n\n  const hideArrows = items.length <= itemsWide;\n\n  return (\n    <ReactResizeDetector handleWidth onResize={onResize}>\n      <SwiperWrapper style={style} media={computeMedia()}>\n        {!hideArrows && (\n          <ArrowLeft\n            data-testid=\"prev\"\n            faded={!canGoToPrevious()}\n            onClick={goToPrevious}\n            className={arrowClassName}\n            style={arrowStyle}\n          >\n            ◀\n          </ArrowLeft>\n        )}\n        <Swipeable\n          onSwiping={eventData => onSwiping(eventData)}\n          onSwiped={onSwipeEnd}\n          {...swipeConfig}\n        >\n          <SwiperCanvas className={canvasClassName} style={canvasStyle}>\n            {items.map((item, i) => (\n              <Item\n                key={i}\n                itemsWide={computeItemWidth()}\n                currentIndex={currentIndex}\n                data-testid=\"item\"\n                style={{\n                  left: `-${(currentIndex * 100) / computeItemWidth() +\n                    slideOffset}%`,\n                }}\n              >\n                {item}\n              </Item>\n            ))}\n          </SwiperCanvas>\n        </Swipeable>\n        {!hideArrows && (\n          <ArrowRight\n            data-testid=\"next\"\n            faded={!canGoToNext()}\n            onClick={goToNext}\n            className={arrowClassName}\n            style={arrowStyle}\n          >\n            ▶\n          </ArrowRight>\n        )}\n      </SwiperWrapper>\n    </ReactResizeDetector>\n  );\n};\n\nexport default Swiper;\n"],"names":["isMobile","media","SwiperCanvas","styled","div","arrowStyles","css","ArrowLeft","button","props","faded","ArrowRight","Item","itemsWide","SwiperWrapper","Swiper","items","infinity","canvasClassName","canvasStyle","arrowClassName","arrowStyle","style","currentIndex","setCurrentIndex","useState","slideOffset","setSlideOffset","lastSwipe","setLastSwipe","width","setWidth","computeItemWidth","canGoToPrevious","length","canGoToNext","computedWide","goToPrevious","steps","prev","goToNext","next","resetSwipe","now","Date","getTime","hideArrows","React","ReactResizeDetector","handleWidth","onResize","w","computeMedia","onClick","className","Swipeable","onSwiping","eventData","e","draggedPercent","deltaX","onSwiped","trackTouch","trackMouse","map","item","i","key","left"],"mappings":"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"}