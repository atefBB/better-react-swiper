{"version":3,"file":"better-react-swiper.cjs.production.min.js","sources":["../src/arrow.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport const Arrow = (props: any) => (\r\n  <svg {...props} viewBox=\"0 0 42 42\">\r\n    <path d=\"M36.07 20.18l-29-20A1 1 0 005.5 1v40a1 1 0 001.57.82l29-20a1 1 0 000-1.64z\" />\r\n  </svg>\r\n);\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst isMobile = (media: 'xs' | 'sm' | 'md') => {\r\n  return media === 'xs' || media === 'sm';\r\n};\r\n\r\nconst color = {\r\n  blue: '#105783',\r\n};\r\n\r\nexport const SwiperCanvas = styled.div`\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  width: calc(100% - 120px);\r\n  margin: 0;\r\n  padding: 0 60px;\r\n  mask-image: -webkit-gradient(\r\n    linear,\r\n    left top,\r\n    right top,\r\n    color-stop(0, rgba(0, 0, 0, 0)),\r\n    color-stop(0.05, rgba(0, 0, 0, 1)),\r\n    color-stop(0.95, rgba(0, 0, 0, 1)),\r\n    color-stop(1, rgba(0, 0, 0, 0))\r\n  );\r\n  overflow: hidden;\r\n`;\r\n\r\nconst arrowStyles = css`\r\n  box-sizing: content-box;\r\n  cursor: pointer;\r\n  background: #fff;\r\n  border: 0;\r\n  color: ${color.blue};\r\n  border-radius: 50%;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.2);\r\n  font-size: 12px;\r\n  width: 30px;\r\n  height: 30px;\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -15px;\r\n  z-index: 1;\r\n  transition: 0.3s opacity;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  & svg {\r\n    width: 13px;\r\n  }\r\n`;\r\n\r\nexport const ArrowLeft = styled.button<{ faded: boolean }>`\r\n  ${arrowStyles};\r\n  opacity: ${props => (props.faded ? 0.25 : 1)};\r\n  left: 10px;\r\n\r\n  svg {\r\n    transform: scale(-1);\r\n  }\r\n`;\r\n\r\nexport const ArrowRight = styled.button<{ faded: boolean }>`\r\n  ${arrowStyles};\r\n  opacity: ${props => (props.faded ? 0.25 : 1)};\r\n  right: 10px;\r\n`;\r\n\r\nexport const Item = styled.div<{\r\n  currentIndex: number;\r\n  itemsWide: number;\r\n}>`\r\n  transition: 0.3s left;\r\n  position: relative;\r\n  width: ${props => 100 / props.itemsWide}%;\r\n  flex: 0 0 ${props => 100 / props.itemsWide}%;\r\n  display: flex;\r\n`;\r\n\r\nexport const SwiperWrapper = styled.div<{ media: 'xs' | 'sm' | 'md' }>`\r\n  position: relative;\r\n\r\n  ${SwiperCanvas} {\r\n    ${props =>\r\n      isMobile(props.media)\r\n        ? css`\r\n            width: calc(100% - 80px);\r\n            padding: 0 40px;\r\n          `\r\n        : null}\r\n  }\r\n\r\n  ${ArrowLeft} {\r\n    ${props =>\r\n      isMobile(props.media)\r\n        ? css`\r\n            left: 5px;\r\n          `\r\n        : null}\r\n  }\r\n\r\n  ${ArrowRight} {\r\n    ${props =>\r\n      isMobile(props.media)\r\n        ? css`\r\n            right: 5px;\r\n          `\r\n        : null}\r\n  }\r\n\r\n  ${Item} {\r\n    ${props =>\r\n      isMobile(props.media)\r\n        ? css`\r\n            width: 100%;\r\n            flex-basis: 100%;\r\n          `\r\n        : null}\r\n  }\r\n`;\r\n","import * as React from 'react';\r\nimport ReactResizeDetector from 'react-resize-detector';\r\nimport { useSwipeable, EventData, SwipeableOptions } from 'react-swipeable';\r\nimport { Arrow } from './arrow';\r\n\r\nimport {\r\n  ArrowLeft,\r\n  ArrowRight,\r\n  Item,\r\n  SwiperCanvas,\r\n  SwiperWrapper,\r\n} from './styles';\r\n\r\nconst MEDIA_MAX_XS = 576;\r\nconst MEDIA_MAX_SM = 767;\r\n\r\ninterface SwiperProps {\r\n  items: any[];\r\n  itemsWide?: number;\r\n  infinity?: boolean;\r\n  canvasClassName?: string;\r\n  canvasStyle?: React.CSSProperties;\r\n  arrowClassName?: string;\r\n  arrowStyle?: React.CSSProperties;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nconst Swiper = ({\r\n  items = [],\r\n  itemsWide = 3,\r\n  infinity = false,\r\n  canvasClassName,\r\n  canvasStyle,\r\n  arrowClassName,\r\n  arrowStyle,\r\n  style,\r\n}: SwiperProps): JSX.Element => {\r\n  const [currentIndex, setCurrentIndex] = React.useState<number>(0);\r\n  const [slideOffset, setSlideOffset] = React.useState<number>(0);\r\n\r\n  // TODO: there has to be a better way...\r\n  const [lastSwipe, setLastSwipe] = React.useState<number | null>(null);\r\n  const [width, setWidth] = React.useState<number>(0);\r\n\r\n  const swipeConfig: SwipeableOptions = {\r\n    trackTouch: true,\r\n    trackMouse: true,\r\n  };\r\n\r\n  const swipeHandlers = useSwipeable({\r\n    onSwiping: eventData => onSwiping(eventData),\r\n    onSwiped: () => {\r\n      setSlideOffset(0);\r\n    },\r\n    ...swipeConfig,\r\n  });\r\n\r\n  const computeMedia = () => {\r\n    if (width <= MEDIA_MAX_XS) {\r\n      return 'xs';\r\n    }\r\n    if (width <= MEDIA_MAX_SM) {\r\n      return 'sm';\r\n    }\r\n    return 'md';\r\n  };\r\n\r\n  const computeItemWidth = () => {\r\n    return width <= MEDIA_MAX_SM ? 1 : itemsWide;\r\n  };\r\n\r\n  const canGoToPrevious = () => {\r\n    return (infinity && items.length > 1) || currentIndex !== 0;\r\n  };\r\n\r\n  const canGoToNext = () => {\r\n    const computedWide = computeItemWidth();\r\n\r\n    return (\r\n      (infinity && items.length > 1) ||\r\n      currentIndex < items.length - computedWide\r\n    );\r\n  };\r\n\r\n  const goToPrevious = () => {\r\n    if (!canGoToPrevious()) {\r\n      return;\r\n    }\r\n\r\n    const computedWide = computeItemWidth();\r\n\r\n    const steps = currentIndex === 0 ? computedWide : 1;\r\n    const prev = (items.length + currentIndex - steps) % items.length;\r\n\r\n    setCurrentIndex(prev);\r\n  };\r\n\r\n  const goToNext = () => {\r\n    if (!canGoToNext()) {\r\n      return;\r\n    }\r\n\r\n    const computedWide = computeItemWidth();\r\n\r\n    const steps = items.length - currentIndex > computedWide ? 1 : computedWide;\r\n    const next = (items.length + currentIndex + steps) % items.length;\r\n\r\n    setCurrentIndex(next);\r\n  };\r\n\r\n  const resetSwipe = () => {\r\n    const now = new Date().getTime();\r\n    setSlideOffset(0);\r\n    setLastSwipe(now);\r\n  };\r\n\r\n  const onSwiping = (e: EventData) => {\r\n    const now = new Date().getTime();\r\n\r\n    if (!width) {\r\n      return;\r\n    }\r\n\r\n    if (lastSwipe && now - lastSwipe < 250) {\r\n      return;\r\n    }\r\n\r\n    const draggedPercent = (e.deltaX * 2) / width;\r\n\r\n    setSlideOffset(draggedPercent * 100);\r\n\r\n    if (draggedPercent < -0.3333) {\r\n      resetSwipe();\r\n      goToPrevious();\r\n      return;\r\n    }\r\n\r\n    if (draggedPercent > 0.3333) {\r\n      resetSwipe();\r\n      goToNext();\r\n      return;\r\n    }\r\n  };\r\n\r\n  const onResize = (w: number) => {\r\n    setWidth(w);\r\n    resetSwipe();\r\n  };\r\n\r\n  const hideArrows = items.length <= itemsWide;\r\n\r\n  return (\r\n    <ReactResizeDetector handleWidth onResize={onResize}>\r\n      <SwiperWrapper style={style} media={computeMedia()}>\r\n        {!hideArrows && (\r\n          <ArrowLeft\r\n            data-testid=\"prev\"\r\n            faded={!canGoToPrevious()}\r\n            onClick={goToPrevious}\r\n            className={arrowClassName}\r\n            style={arrowStyle}\r\n          >\r\n            <Arrow />\r\n          </ArrowLeft>\r\n        )}\r\n        <SwiperCanvas\r\n          {...swipeHandlers}\r\n          className={canvasClassName}\r\n          style={canvasStyle}\r\n        >\r\n          {items.map((item, i) => (\r\n            <Item\r\n              key={i}\r\n              itemsWide={computeItemWidth()}\r\n              currentIndex={currentIndex}\r\n              data-testid=\"item\"\r\n              style={{\r\n                left: `-${(currentIndex * 100) / computeItemWidth() +\r\n                  slideOffset}%`,\r\n              }}\r\n            >\r\n              {item}\r\n            </Item>\r\n          ))}\r\n        </SwiperCanvas>\r\n        {!hideArrows && (\r\n          <ArrowRight\r\n            data-testid=\"next\"\r\n            faded={!canGoToNext()}\r\n            onClick={goToNext}\r\n            className={arrowClassName}\r\n            style={arrowStyle}\r\n          >\r\n            <Arrow />\r\n          </ArrowRight>\r\n        )}\r\n      </SwiperWrapper>\r\n    </ReactResizeDetector>\r\n  );\r\n};\r\n\r\nexport default Swiper;\r\n"],"names":["Arrow","props","React","viewBox","d","isMobile","media","SwiperCanvas","styled","div","arrowStyles","css","ArrowLeft","button","faded","ArrowRight","Item","itemsWide","SwiperWrapper","items","infinity","canvasClassName","canvasStyle","arrowClassName","arrowStyle","style","currentIndex","setCurrentIndex","slideOffset","setSlideOffset","lastSwipe","setLastSwipe","width","setWidth","swipeHandlers","useSwipeable","onSwiping","eventData","onSwiped","trackTouch","trackMouse","computeItemWidth","canGoToPrevious","length","canGoToNext","computedWide","goToPrevious","goToNext","resetSwipe","now","Date","getTime","e","draggedPercent","deltaX","hideArrows","ReactResizeDetector","handleWidth","onResize","w","onClick","className","map","item","i","key","left"],"mappings":"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"}